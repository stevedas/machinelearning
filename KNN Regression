# Import libraries to work with the data
import pandas as pd
import numpy as np

#Import libraries to make graphs
import matplotlib.pyplot as plt

# Import libraries to create KNN model 
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor

#Create a DataFrame with x and y columns
df = pd.DataFrame({'x':[1,3,3,4,5,8,10,9,11,12],'y': [2,4,6,8,10,12,14,12,11,12]})

#Plot the original data points 
plt.plot(df.x, df.y, 'bo')
plt.xlabel('X')
plt.ylabel('Y')

#split the x and y data into training and test groups
x_train, x_test, y_train, y_test = train_test_split(df[['x']],df[['y']], test_size= 0.5, random_state=12)

print("\n")
print(f'x_train y_train shapes: {x_train.shape, y_train.shape}  \n x_test  y_test shapes: {x_test.shape, y_test.shape}')
print("\n")
print("\n")

# Fit the model to the data 
knn_RegModel = KNeighborsRegressor(n_neighbors=3).fit(x_train, y_train)

# Get the R-squared for the KNN regression
Rsq_knn  = knn_RegModel.score(x_test, y_test)
print("*****************************************************")
print(f"The R-squared for the model is {Rsq_knn }")
print("*****************************************************")
print("\n")

# Compare predictions of the test data to the actual values of y
preds = knn_RegModel.predict(x_test)
print("These are the predictions of y using the 5 values in x_test:\n ")
for i in range(5):
  
  print (preds[i,0] )

print("\n")
print(f"These are the actual values of y:\n {y_test}")

#Predict a y value from a new value of x
print("\n")
single_pred = knn_RegModel.predict([[14]])       
print(f"For an x value of 14 the predicted y value is {single_pred[0,0]}")


print("\n")

#import libraries to compare errors for each value of K
#from 1 to 5
from sklearn.metrics import mean_squared_error 
from math import sqrt


rmse_val = [] # list to store rmse values for different K values
for K in range(1,6):
    knn_RegModel = KNeighborsRegressor(n_neighbors=K).fit(x_train, y_train)
    pred=knn_RegModel.predict(x_test) #make predictions with the x test set
    RMSE = sqrt(mean_squared_error(y_test,pred)) #calculate the rmse
    rmse_val.append(RMSE) #store rmse values to graph later
    print("**********************************************")
    print('RMSE value when k is' , K , 'is:', RMSE)

curve = pd.DataFrame( rmse_val,index =[1,2,3,4,5],columns =['Error for each K value'])    

curve.plot(xlabel='K Value',ylabel='RMSE')



